#!/usr/bin/env python3

import sys
import os
import struct
import subprocess

gpr = [
    "0",    "at",   "v0",   "v1",
    "a0",   "a1",   "a2",   "a3",
    "t0",   "t1",   "t2",   "t3",
    "t4",   "t5",   "t6",   "t7",
    "s0",   "s1",   "s2",   "s3",
    "s4",   "s5",   "s6",   "s7",
    "t8",   "t9",   "k0",   "k1",
    "gp",   "sp",   "r30",  "ra",
]

cop1_fmt = {
    0x10: "f[IX]",
    0x11: "d",
    0x14: "i[IX]",
}

reg_cpu = [
    # (1 <<  0, "r0"),
    (1 <<  1, "at"),
    (1 <<  2, "v0"),
    (1 <<  3, "v1"),
    (1 <<  4, "a0"),
    (1 <<  5, "a1"),
    (1 <<  6, "a2"),
    (1 <<  7, "a3"),
    (1 <<  8, "t0"),
    (1 <<  9, "t1"),
    (1 << 10, "t2"),
    (1 << 11, "t3"),
    (1 << 12, "t4"),
    (1 << 13, "t5"),
    (1 << 14, "t6"),
    (1 << 15, "t7"),
    (1 << 16, "s0"),
    (1 << 17, "s1"),
    (1 << 18, "s2"),
    (1 << 19, "s3"),
    (1 << 20, "s4"),
    (1 << 21, "s5"),
    (1 << 22, "s6"),
    (1 << 23, "s7"),
    (1 << 24, "t8"),
    (1 << 25, "t9"),
    # (1 << 26, "k0"),
    # (1 << 27, "k1"),
    (1 << 28, "gp"),
    (1 << 29, "sp"),
    (1 << 30, "r30"),
    (1 << 31, "ra"),
]

reg_fpu = [
    (1 << 32, "f0"),
    (1 << 33, "f2"),
    (1 << 34, "f4"),
    (1 << 35, "f6"),
    (1 << 36, "f8"),
    (1 << 37, "f10"),
    (1 << 38, "f12"),
    (1 << 39, "f14"),
    (1 << 40, "f16"),
    (1 << 41, "f18"),
    (1 << 42, "f20"),
    (1 << 43, "f22"),
    (1 << 44, "f24"),
    (1 << 45, "f26"),
    (1 << 46, "f28"),
    (1 << 47, "f30"),
]

reg_lohi = [
    (1 << 48, "lo"),
    (1 << 48, "hi"),
]

reg_table = [
    ["s32", reg_cpu],
    ["REG", reg_fpu],
    ["s32", reg_lohi],
]

reg_mask = (
    1 <<  2 | # v0
    1 <<  3 | # v1
    1 <<  4 | # a0
    1 <<  5 | # a1
    1 <<  6 | # a2
    1 <<  7 | # a3
    1 << 29 | # sp
    1 << 32 | # f0
    1 << 38 | # f12
    1 << 39   # f14
)

def op_unpack():
    global inst
    global inst_op
    global inst_rs
    global inst_rt
    global inst_rd
    global inst_sa
    global inst_func
    global inst_immu
    global inst_imms
    global inst_fmt
    global inst_ft
    global inst_fs
    global inst_fd
    global inst_bdst
    global inst_jdst
    inst, = struct.unpack(">I", data[".text"][addr-start : addr-start + 4])
    inst_op   = inst >> 26 & 0x3F
    inst_rs   = inst >> 21 & 0x1F
    inst_rt   = inst >> 16 & 0x1F
    inst_rd   = inst >> 11 & 0x1F
    inst_sa   = inst >>  6 & 0x1F
    inst_func = inst >>  0 & 0x3F
    inst_immu = inst >>  0 & 0xFFFF
    inst_fmt  = inst_rs
    inst_ft   = inst_rt
    inst_fs   = inst_rd
    inst_fd   = inst_sa
    inst_imms = inst_immu - (inst_immu << 1 & 0x10000)
    inst_bdst = addr+4 + (inst_imms << 2)
    inst_jdst = (addr & 0xF0000000) | (inst & 0x03FFFFFF) << 2

def op_process():
    op_unpack()
    if inst in {0x10000001}: return [(addr, "")], False
    return op_table[inst_op]()

def op_maxb(jt):
    global inst_maxb
    if jt & 2:
        if inst_maxb < inst_bdst:   inst_maxb = inst_bdst
    else:
        if inst_maxb < inst_jdst:   inst_maxb = inst_jdst
    return jt

def op_jt():
    if inst == 0x10000001: return 0
    if inst_op == 0x01:
        if inst_rt in {0x00, 0x01}:         return op_maxb(2)
    if inst_op == 0x11:
        if inst_rs == 0x08:
            if inst_rt in {0x00, 0x01}:     return op_maxb(2)
    if inst_op in {0x04, 0x05, 0x06, 0x07}: return op_maxb(2)
    return 0

def op_end():
    return inst == 0x03E00008

def op_null():
    line = "null 0x%08X:0x%08X" % (addr, inst)
    line += "  op=0x%02X" % inst_op
    if inst_op == 0x00:
        line += "  func=0x%02X" % inst_func
    if inst_op == 0x01:
        line += "  rt=0x%02X" % inst_rt
    if inst_op == 0x11:
        line += "  rs=0x%02X" % inst_rs
        if inst_rs in {0x10, 0x11, 0x14}:
            line += "  func=0x%02X" % inst_func
    raise RuntimeError(line)

def op_shift():
    global reg_flag
    global jal_addr
    reg_flag |= 1 << inst_rd
    if inst == 0x00000000: return [(addr, "")], False
    if inst_rd == 25: jal_addr = None
    if inst_func in {0x04, 0x06, 0x07}:
        rs = "(%s & 0x1F)" % gpr[inst_rs]
    else:
        sa = inst_sa
        rs = "%d" % sa
    op, t = {
        0x00: ("<<", "(u32)"),
        0x02: (">>", "(u32)"),
        0x03: (">>", ""),
        0x04: ("<<", "(u32)"),
        0x06: (">>", "(u32)"),
        0x07: (">>", ""),
    }[inst_func]
    rt = gpr[inst_rt]
    rd = gpr[inst_rd]
    return [(addr, "    %s = %s%s %s %s;\n" % (
        rd, t, rt, op, rs
    ))], False

def op_jr():
    global addr
    global jr
    rs = inst_rs
    addr += 4
    ln, end = op_process()
    l = ln[0][1] if len(ln) > 0 else ""
    if rs == 0x1F:
        line = "    return;\n"
        end = addr-4 >= inst_maxb
    else:
        jr = True
        line = "    goto *jr[((PTR)%s-0x%08XU) >> 2];\n" % (gpr[rs], addr_s)
        end = False
    return [(addr-4, l+line)] + ln, end

def op_jalr():
    global addr
    global jal_addr
    rs = inst_rs
    ja = jal_addr
    jal_addr = None
    addr += 4
    ln, end = op_process()
    l = ln[0][1] if len(ln) > 0 else ""
    line = "    __call(cpu, %s);\n" % gpr[rs]
    if rs == 25 and ja != None:
        if   ja-4*0 in addrtbl: line = "    %s(cpu);\n" % addrtbl[ja-4*0]
        elif ja-4*3 in addrtbl: line = "    %s(cpu);\n" % addrtbl[ja-4*3]
    return [(addr-4, l), (addr, line)], False

def op_break():
    line = "    __break(cpu, %d);\n" % inst_rt
    return [(addr, line)], False

def op_mfhilo():
    global reg_flag
    global jal_addr
    reg_flag |= 1 << inst_rd
    if inst_rd == 25: jal_addr = None
    rd = gpr[inst_rd]
    src = {
        0x10: "hi",
        0x12: "lo",
    }[inst_func]
    return [(addr, "    %s = %s;\n" % (rd, src))], False

def op_mult():
    global reg_flag
    reg_flag |= 1 << 48
    x, t = {
        0x19: ("u64", "(u32)"),
    }[inst_func]
    rs = gpr[inst_rs]
    rt = gpr[inst_rt]
    line = (
        "    {\n"
        "        %s x = %s%s * %s%s;\n"
        "        lo = x >>  0;\n"
        "        hi = x >> 32;\n"
        "    }\n"
    ) % (x, t, rs, t, rt)
    return [(addr, line)], False

def op_div():
    global reg_flag
    reg_flag |= 1 << 48
    t = {
        0x1A: "",
        0x1B: "(u32)",
    }[inst_func]
    rs = gpr[inst_rs]
    rt = gpr[inst_rt]
    line = (
        "    if (%s%s != 0)\n"
        "    {\n"
        "        lo = %s%s / %s%s;\n"
        "        hi = %s%s %% %s%s;\n"
        "    }\n"
    ) % (t, rt, t, rs, t, rt, t, rs, t, rt)
    return [(addr, line)], False

def op_arith():
    global reg_flag
    global jal_addr
    reg_flag |= 1 << inst_rd
    if inst_rd == 25: jal_addr = None
    op, s, tt, e = {
        0x21: ("+", "", "", ""),
        0x22: ("-", "", "", ""),
        0x23: ("-", "", "", ""),
        0x24: ("&", "", "", ""),
        0x25: ("|", "", "", ""),
        0x26: ("^", "", "", ""),
        0x27: ("|", "~(", "", ")"),
        0x2A: ("<", "", "", ""),
        0x2B: ("<", "(u32)", "(u32)", ""),
    }[inst_func]
    rs = gpr[inst_rs]
    rt = gpr[inst_rt]
    rd = gpr[inst_rd]
    line = "    %s = %s%s %s %s%s%s;\n" % (rd, s, rs, op, tt, rt, e)
    return [(addr, line)], False

def op_special():
    return op_special_table[inst_func]()

def op_regimm():
    return op_regimm_table[inst_rt]()

def op_b():
    global addr
    jt = op_jt()
    if jt == 1:
        bc = "1"
        bdst = inst_jdst
    else:
        rs = gpr[inst_rs]
        rt = gpr[inst_rt]
        if inst_op in {0x01, 0x06, 0x07, 0x16, 0x17}:
            rt = "0"
        if inst_op == 0x11:
            bc = {
                0x00: cop1_cmp_f,
                0x01: cop1_cmp_t,
            }[inst_rt]
        else:
            if inst_op == 0x01:
                op = {
                    0x00: "<",
                    0x01: ">=",
                    0x02: "<",
                    0x03: ">=",
                    0x10: "<",
                    0x11: ">=",
                    0x12: "<",
                    0x13: ">=",
                }[inst_rt]
            else:
                op = {
                    0x04: "==",
                    0x05: "!=",
                    0x06: "<=",
                    0x07: ">",
                    0x14: "==",
                    0x15: "!=",
                    0x16: "<=",
                    0x17: ">",
                }[inst_op]
            bc = "%s %s %s" % (rs, op, rt)
        bdst = inst_bdst
    btbl.add(bdst)
    addr += 4
    ln, end = op_process()
    l = ln[0][1] if len(ln) > 0 else ""
    line = []
    ln = (
        "    if (%s)\n"
        "    {\n"
    ) % bc
    if l != "":
        ln += "    " + l
    ln += (
        "        goto _%08X;\n"
        "    }\n"
    ) % bdst
    if l != "" and (jt & 2):
        ln += (
            "    else\n"
            "    {\n"
        )
        line.append((addr-4, ln))
        ln = (
            "    " + l +
            "    }\n"
        )
        line.append((addr, ln))
    else:
        line.append((addr-4, ln))
        line.append((addr, ""))
    return line, False

def op_bal():
    if inst == 0x04110001:
        line = "    ra = 0x%08X;\n" % (addr+8)
        return [(addr, line)], False
    raise RuntimeError("bgezal $%s, 0x%08X" % (gpr[inst_rs], inst_bdst))

def op_arithi():
    global reg_flag
    global jal_addr
    reg_flag |= 1 << inst_rt
    if inst_rt == 25:
        if inst_op == 0x09:
            if jal_addr != None: jal_addr += inst_imms
        else:
            jal_addr = None
    # sltiu
    if inst_op == 0x0B:
        imm = "0x%04XU" % (inst_imms & 0xFFFFFFFF)
    # andi, ori, xori
    elif inst_op in {0x0C, 0x0D, 0x0E}:
        imm = "0x%04XU" % inst_immu
    else:
        imm = "(s16)0x%04X" % inst_immu
    op, s, e = {
        0x08: ("+", "", ""),
        0x09: ("+", "", ""),
        0x0A: ("<", "", ""),
        0x0B: ("<", "(u32)", ""),
        0x0C: ("&", "", ""),
        0x0D: ("|", "", ""),
        0x0E: ("^", "", ""),
    }[inst_op]
    rs = gpr[inst_rs]
    rt = gpr[inst_rt]
    line = "    %s = %s%s %s %s%s;\n" % (rt, s, rs, op, imm, e)
    return [(addr, line)], False

def op_lui():
    global reg_flag
    global jal_addr
    reg_flag |= 1 << inst_rt
    if inst_rt == 25: jal_addr = None
    rt = gpr[inst_rt]
    return [(addr, "    %s = 0x%04X0000;\n" % (rt, inst_immu))], False

def op_mfc1():
    global reg_flag
    global jal_addr
    reg_flag |= 1 << inst_rt
    if inst_rt == 25: jal_addr = None
    line = "    %s = f%d.iu[%d^IX];\n" % (
        gpr[inst_rt], inst_rd & ~1, inst_rd & 1
    )
    return [(addr, line)], False

def op_mtc1():
    global reg_flag
    reg_flag |= (1 << 32) << (inst_rd >> 1)
    line = "    f%d.iu[%d^IX] = %s;\n" % (
        inst_rd & ~1, inst_rd & 1, gpr[inst_rt]
    )
    return [(addr, line)], False

def op_cfc1():
    global reg_flag
    reg_flag |= 1 << inst_rt
    line = "    %s = 0;\n" % gpr[inst_rt]
    return [(addr, line)], False

def op_ctc1():
    return [(addr, "")], False

def op_arithf():
    global reg_flag
    reg_flag |= (1 << 32) << (inst_fd >> 1)
    fmt = cop1_fmt[inst_fmt]
    ft = "f%d.%s" % (inst_ft & ~1, fmt)
    fs = "f%d.%s" % (inst_fs & ~1, fmt)
    fd = "f%d.%s" % (inst_fd & ~1, fmt)
    if inst_func in {0x04, 0x05, 0x06, 0x07}:
        start, end = {
            0x06: ("", ""),
            0x07: ("-", ""),
        }[inst_func]
        return [(addr, "    %s = %s%s%s;\n" % (fd, start, fs, end))], False
    else:
        op = {
            0x00: "+",
            0x01: "-",
            0x02: "*",
            0x03: "/",
        }[inst_func]
        return [(addr, "    %s = %s %s %s;\n" % (fd, fs, op, ft))], False
    return [(addr, "")], False

def op_cvt():
    global reg_flag
    reg_flag |= (1 << 32) << (inst_fd >> 1)
    dst = {
        0x20: "f[IX]", # cvt.s
        0x21: "d",     # cvt.d
        0x24: "i[IX]", # cvt.w
    }[inst_func]
    fmt = cop1_fmt[inst_fmt]
    fs = "f%d.%s" % (inst_fs & ~1, fmt)
    fd = "f%d.%s" % (inst_fd & ~1, dst)
    return [(addr, "    %s = %s;\n" % (fd, fs))], False

def op_cmp():
    global cop1_cmp_f
    global cop1_cmp_t
    f, t = {
        0x32: ("!=", "=="),
        0x3C: (">=", "<"),
        0x3E: (">",  "<="),
    }[inst_func]
    fmt = cop1_fmt[inst_fmt]
    ft = "f%d.%s" % (inst_ft & ~1, fmt)
    fs = "f%d.%s" % (inst_fs & ~1, fmt)
    cop1_cmp_f = "%s %s %s" % (fs, f, ft)
    cop1_cmp_t = "%s %s %s" % (fs, t, ft)
    return [(addr, "")], False

def op_cop1_f():
    return op_cop1_func_table[inst_func]()

def op_cop1():
    return op_cop1_table[inst_rs]()

def op_load():
    global reg_flag
    global jal_addr
    t = {
        0x20: "s8",
        0x21: "s16",
        0x23: "s32",
        0x24: "u8",
        0x25: "u16",
        0x27: "u32",
        0x31: "s32",
    }[inst_op]
    rs = gpr[inst_rs]
    if inst_op == 0x31:
        reg_flag |= (1 << 32) << (inst_rt >> 1)
        rt = "f%d.i[%d^IX]" % (inst_rt & ~1, inst_rt & 1)
    else:
        if inst_rt == 0x00: return [(addr, "")], False
        reg_flag |= 1 << inst_rt
        if inst_rt == 25:
            if inst_rs == 28:
                x = symtab["_gp_disp"]+inst_imms - 0x10000000
                jal_addr, = struct.unpack(">I", app_data[x:x+4])
            else:
                jal_addr = None
        rt = gpr[inst_rt]
    line = "    %s = *cpu_%s(%s + (s16)0x%04X);\n" % (rt, t, rs, inst_immu)
    return [(addr, line)], False

def op_store():
    global chk_flag
    t = {
        0x28: "s8",
        0x29: "s16",
        0x2B: "s32",
        0x39: "s32",
    }[inst_op]
    rs = gpr[inst_rs]
    if inst_op == 0x39:
        # flag = (1 << 32) << (inst_rt >> 1)
        # f20-f30
        # if (flag & 0xFC0000000000) and not ((reg_flag | chk_flag) & flag):
        #     chk_flag |= flag
        #     return [(addr, "")], False
        rt = "f%d.i[%d^IX]" % (inst_rt & ~1, inst_rt & 1)
    else:
        # flag = 1 << inst_rt
        # s0-s7, gp, s8, ra
        # if (flag & 0x0000D0FF0000) and not ((reg_flag | chk_flag) & flag):
        #     chk_flag |= flag
        #     return [(addr, "")], False
        rt = gpr[inst_rt]
    line = "    *cpu_%s(%s + (s16)0x%04X) = %s;\n" % (t, rs, inst_immu, rt)
    return [(addr, line)], False

def op_ls(rt):
    t = {
        0x22: "lwl",
        0x26: "lwr",
        0x2A: "swl",
        0x2E: "swr",
    }[inst_op]
    rs = gpr[inst_rs]
    line = "    __%s(%s + (s16)0x%04X, %s);\n" % (t, rs, inst_immu, rt)
    return [(addr, line)], False

def op_lw():
    global reg_flag
    if inst_rt == 0x00: return [(addr, "")], False
    reg_flag |= 1 << inst_rt
    return op_ls(gpr[inst_rt])

def op_sw():
    global chk_flag
    # flag = 1 << inst_rt
    # s0-s7, gp, s8, ra
    # if (flag & 0x0000D0FF0000) and not ((reg_flag | chk_flag) & flag):
    #     chk_flag |= flag
    #     return [(addr, "")], False
    return op_ls(gpr[inst_rt])

op_special_table = [
    op_shift,   # 0x00 sll
    op_null,    # 0x01
    op_shift,   # 0x02 srl
    op_shift,   # 0x03 sra
    op_shift,   # 0x04 sllv
    op_null,    # 0x05
    op_shift,   # 0x06 srlv
    op_shift,   # 0x07 srav
    op_jr,      # 0x08 jr
    op_jalr,    # 0x09 jalr
    op_null,    # 0x0A
    op_null,    # 0x0B
    op_null,    # 0x0C syscall
    op_break,   # 0x0D break
    op_null,    # 0x0E
    op_null,    # 0x0F sync
    op_mfhilo,  # 0x10 mfhi
    op_null,    # 0x11 mthi
    op_mfhilo,  # 0x12 mflo
    op_null,    # 0x13 mtlo
    op_null,    # 0x14 dsllv
    op_null,    # 0x15
    op_null,    # 0x16 dsrlv
    op_null,    # 0x17 dsrav
    op_null,    # 0x18 mult
    op_mult,    # 0x19 multu
    op_div,     # 0x1A div
    op_div,     # 0x1B divu
    op_null,    # 0x1C dmult
    op_null,    # 0x1D dmultu
    op_null,    # 0x1E ddiv
    op_null,    # 0x1F ddivu
    op_null,    # 0x20 add
    op_arith,   # 0x21 addu
    op_arith,   # 0x22 sub
    op_arith,   # 0x23 subu
    op_arith,   # 0x24 and
    op_arith,   # 0x25 or
    op_arith,   # 0x26 xor
    op_arith,   # 0x27 nor
    op_null,    # 0x28
    op_null,    # 0x29
    op_arith,   # 0x2A slt
    op_arith,   # 0x2B sltu
    op_null,    # 0x2C dadd
    op_null,    # 0x2D daddu
    op_null,    # 0x2E dsub
    op_null,    # 0x2F dsubu
    op_null,    # 0x30 tge
    op_null,    # 0x31 tgeu
    op_null,    # 0x32 tlt
    op_null,    # 0x33 tltu
    op_null,    # 0x34 teq
    op_null,    # 0x35
    op_null,    # 0x36 tne
    op_null,    # 0x37
    op_null,    # 0x38 dsll
    op_null,    # 0x39
    op_null,    # 0x3A dsrl
    op_null,    # 0x3B dsra
    op_null,    # 0x3C dsll32
    op_null,    # 0x3D
    op_null,    # 0x3E dsrl32
    op_null,    # 0x3F dsra32
]

op_regimm_table = [
    op_b,       # 0x00 bltz
    op_b,       # 0x01 bgez
    op_null,    # 0x02 bltzl
    op_null,    # 0x03 bgezl
    op_null,    # 0x04
    op_null,    # 0x05
    op_null,    # 0x06
    op_null,    # 0x07
    op_null,    # 0x08 tgei
    op_null,    # 0x09 tgeiu
    op_null,    # 0x0A tlti
    op_null,    # 0x0B tltiu
    op_null,    # 0x0C teqi
    op_null,    # 0x0D
    op_null,    # 0x0E tnei
    op_null,    # 0x0F
    op_null,    # 0x10 bltzal
    op_bal,     # 0x11 bgezal
    op_null,    # 0x12 bltzall
    op_null,    # 0x13 bgezall
    op_null,    # 0x14
    op_null,    # 0x15
    op_null,    # 0x16
    op_null,    # 0x17
    op_null,    # 0x18
    op_null,    # 0x19
    op_null,    # 0x1A
    op_null,    # 0x1B
    op_null,    # 0x1C
    op_null,    # 0x1D
    op_null,    # 0x1E
    op_null,    # 0x1F
]

op_cop1_func_table = [
    op_arithf,  # 0x00 add
    op_arithf,  # 0x01 sub
    op_arithf,  # 0x02 mul
    op_arithf,  # 0x03 div
    op_null,    # 0x04 sqrt
    op_null,    # 0x05 abs
    op_arithf,  # 0x06 mov
    op_arithf,  # 0x07 neg
    op_null,    # 0x08 round.l
    op_null,    # 0x09 trunc.l
    op_null,    # 0x0A ceil.l
    op_null,    # 0x0B floor.l
    op_null,    # 0x0C round.w
    op_null,    # 0x0D trunc.w
    op_null,    # 0x0E ceil.w
    op_null,    # 0x0F floor.w
    op_null,    # 0x10
    op_null,    # 0x11
    op_null,    # 0x12
    op_null,    # 0x13
    op_null,    # 0x14
    op_null,    # 0x15
    op_null,    # 0x16
    op_null,    # 0x17
    op_null,    # 0x18
    op_null,    # 0x19
    op_null,    # 0x1A
    op_null,    # 0x1B
    op_null,    # 0x1C
    op_null,    # 0x1D
    op_null,    # 0x1E
    op_null,    # 0x1F
    op_cvt,     # 0x20 cvt.s
    op_cvt,     # 0x21 cvt.d
    op_null,    # 0x22
    op_null,    # 0x23
    op_cvt,     # 0x24 cvt.w
    op_null,    # 0x25 cvt.l
    op_null,    # 0x26
    op_null,    # 0x27
    op_null,    # 0x28
    op_null,    # 0x29
    op_null,    # 0x2A
    op_null,    # 0x2B
    op_null,    # 0x2C
    op_null,    # 0x2D
    op_null,    # 0x2E
    op_null,    # 0x2F
    op_null,    # 0x30 c.f
    op_null,    # 0x31 c.un
    op_cmp,     # 0x32 c.eq
    op_null,    # 0x33 c.ueq
    op_null,    # 0x34 c.olt
    op_null,    # 0x35 c.ult
    op_null,    # 0x36 c.ole
    op_null,    # 0x37 c.ule
    op_null,    # 0x38 c.sf
    op_null,    # 0x39 c.ngle
    op_null,    # 0x3A c.seq
    op_null,    # 0x3B c.ngl
    op_cmp,     # 0x3C c.lt
    op_null,    # 0x3D c.nge
    op_cmp,     # 0x3E c.le
    op_null,    # 0x3F c.ngt
]

op_cop1_table = [
    op_mfc1,    # 0x00 mfc1
    op_null,    # 0x01 dmfc1
    op_cfc1,    # 0x02 cfc1
    op_null,    # 0x03
    op_mtc1,    # 0x04 mtc1
    op_null,    # 0x05 dmtc1
    op_ctc1,    # 0x06 ctc1
    op_null,    # 0x07
    op_b,       # 0x08 bc1
    op_null,    # 0x09
    op_null,    # 0x0A
    op_null,    # 0x0B
    op_null,    # 0x0C
    op_null,    # 0x0D
    op_null,    # 0x0E
    op_null,    # 0x0F
    op_cop1_f,  # 0x10
    op_cop1_f,  # 0x11
    op_null,    # 0x12
    op_null,    # 0x13
    op_cop1_f,  # 0x14
    op_null,    # 0x15
    op_null,    # 0x16
    op_null,    # 0x17
    op_null,    # 0x18
    op_null,    # 0x19
    op_null,    # 0x1A
    op_null,    # 0x1B
    op_null,    # 0x1C
    op_null,    # 0x1D
    op_null,    # 0x1E
    op_null,    # 0x1F
]

op_table = [
    op_special, # 0x00 special
    op_regimm,  # 0x01 regimm
    op_null,    # 0x02 j
    op_null,    # 0x03 jal
    op_b,       # 0x04 beq
    op_b,       # 0x05 bne
    op_b,       # 0x06 blez
    op_b,       # 0x07 bgtz
    op_arithi,  # 0x08 addi
    op_arithi,  # 0x09 addiu
    op_arithi,  # 0x0A slti
    op_arithi,  # 0x0B sltiu
    op_arithi,  # 0x0C andi
    op_arithi,  # 0x0D ori
    op_arithi,  # 0x0E xori
    op_lui,     # 0x0F lui
    op_null,    # 0x10 cop0
    op_cop1,    # 0x11 cop1
    op_null,    # 0x12 cop2
    op_null,    # 0x13
    op_null,    # 0x14 beql
    op_null,    # 0x15 bnel
    op_null,    # 0x16 blezl
    op_null,    # 0x17 bgtzl
    op_null,    # 0x18 daddi
    op_null,    # 0x19 daddiu
    op_null,    # 0x1A ldl
    op_null,    # 0x1B ldr
    op_null,    # 0x1C
    op_null,    # 0x1D
    op_null,    # 0x1E
    op_null,    # 0x1F
    op_load,    # 0x20 lb
    op_load,    # 0x21 lh
    op_lw,      # 0x22 lwl
    op_load,    # 0x23 lw
    op_load,    # 0x24 lbu
    op_load,    # 0x25 lhu
    op_lw,      # 0x26 lwr
    op_null,    # 0x27 lwu
    op_store,   # 0x28 sb
    op_store,   # 0x29 sh
    op_sw,      # 0x2A swl
    op_store,   # 0x2B sw
    op_null,    # 0x2C sdl
    op_null,    # 0x2D sdr
    op_sw,      # 0x2E swr
    op_null,    # 0x2F cache
    op_null,    # 0x30 ll
    op_load,    # 0x31 lwc1
    op_null,    # 0x32 lwc2
    op_null,    # 0x33
    op_null,    # 0x34 lld
    op_null,    # 0x35 ldc1
    op_null,    # 0x36 ldc2
    op_null,    # 0x37 ld
    op_null,    # 0x38 sc
    op_store,   # 0x39 swc1
    op_null,    # 0x3A swc2
    op_null,    # 0x3B
    op_null,    # 0x3C scd
    op_null,    # 0x3D sdc1
    op_null,    # 0x3E sdc2
    op_null,    # 0x3F sd
]

def i_hi(x):    return (x >> 16) + (x >> 15 & 1)
def i_lo(x):    return x & 0xFFFF

def e_reg(op, rs, rt, rd, sa, fn):
    return (
        (op & 0x3F) << 26 |
        (rs & 0x1F) << 21 |
        (rt & 0x1F) << 16 |
        (rd & 0x1F) << 11 |
        (sa & 0x1F) <<  6 |
        (fn & 0x3F) <<  0
    )

def e_imm(op, rs, rt, im):
    return (
        (op & 0x3F) << 26 |
        (rs & 0x1F) << 21 |
        (rt & 0x1F) << 16 |
        (im & 0xFFFF) << 0
    )

def e_la_u(rt, addr):   return e_imm(15,  0, rt, i_hi(addr))
def e_la_l(rt, addr):   return e_imm( 9, rt, rt, i_lo(addr))
def e_jalr(rs):         return e_reg( 0, rs,  0, 31,  0,  9)
def e_nop():            return e_reg( 0,  0,  0,  0,  0,  0)

def patch(symbol, callback):
    global data
    if symbol in symtab:
        i = symtab[symbol] - start
        x = B"".join([struct.pack(">I", x) for x in callback()])
        data[".text"] = data[".text"][:i] + x + data[".text"][i+len(x):]

prefix = "mips-linux-gnu-"
objcopy = prefix + "objcopy"
readelf = prefix + "readelf"

def readsym(fn, callback):
    data = subprocess.check_output([readelf, "-W", "-s", fn]).decode()
    for line in data.split("\n"):
        if ":" in line:
            x = line.split()
            if len(x) == 8 and x[0][:-1].isdigit():
                callback(int(x[1], 16), x[6], x[7])

def readsym_main(addr, ndx, name):
    if ndx == "WEAK": return
    if ndx == "UND" or ndx == "COM":
        undtbl.add(name)
        if name == "_rld_new_interface": addrtbl[addr] = "lib_" + name
    else:
        if name not in symtab: symtab[name] = addr
        if addr not in addrtbl:
            if name not in nametbl:
                nametbl[name] = 0
            else:
                nametbl[name] += 1
                name += "_%d" % nametbl[name]
            addrtbl[addr] = "app_" + name

def readsym_ext(addr, ndx, name):
    if name in undtbl:
        if name not in symtab: symtab[name] = addr
        if addr not in addrtbl or not name.startswith("_"):
            if not name.startswith(".") and name not in {
                "__elf_header",
                "__program_header_table",
                "sys_errlist",
                "sys_nerr",
                "__ctype",
                "__us_rsthread_stdio",
                "errno",
                "_environ",
                "__iob",
                "_smbuf",
                "_sibuf",
                "_sobuf",
            }: addrtbl[addr] = "lib_" + name

def main(argv):
    global symtab
    global addrtbl
    global nametbl
    global undtbl
    global app_data
    global btbl
    global data
    global start
    global addr_s
    global addr
    global inst
    global inst_maxb
    global reg_flag
    global chk_flag
    global jr
    global jal_addr
    if len(argv) < 3:
        print("usage: %s <output> <input>" % argv[0])
        return 1
    symtab  = {}
    addrtbl = {}
    nametbl = {}
    undtbl  = {
        "__ctype",
        "errno",
        "__iob",
    }
    readsym(argv[2], readsym_main)
    for fn in argv[3:]: readsym(fn, readsym_ext)
    data = {section: subprocess.check_output([
        objcopy, "-j", section, "-O", "binary", argv[2], "/dev/stdout"
    ]) for section in (".text", ".data", ".rodata", ".got")}
    app_data = data[".data"] + data[".rodata"] + data[".got"]
    start = symtab[".text"]
    end   = start + len(data[".text"])
    patch("xmalloc", lambda: (
        e_la_u( 5, symtab["malloc_scb"]),
        e_la_u(25, symtab["alloc_new"]),
        e_la_l(25, symtab["alloc_new"]),
        e_jalr(25),
        e_la_l( 5, symtab["malloc_scb"]),
        e_nop(),
        e_nop(),
    ))
    patch("xfree", lambda: (
        e_la_u( 5, symtab["malloc_scb"]),
        e_la_u(25, symtab["alloc_dispose"]),
        e_la_l(25, symtab["alloc_dispose"]),
        e_jalr(25),
        e_la_l( 5, symtab["malloc_scb"]),
    ))
    addr = start
    while addr < end:
        while addr < end:
            op_unpack()
            if inst != 0x00000000: break
            addr += 4
        if addr >= end: break
        if addr not in addrtbl: addrtbl[addr] = "app_%08X" % addr
        inst_maxb = 0
        while True:
            op_unpack()
            op_jt()
            if op_end() and addr >= inst_maxb: break
            addr += 4
        addr += 8
    ext = sorted([
        addr for addr in addrtbl.keys()
        if addrtbl[addr].startswith("lib_")
    ])
    sym = sorted([
        addr for addr in addrtbl.keys()
        if addr > symtab["_mcount"] and addr < end
    ])
    app_c = (
        "#include \"app.h\"\n"
        "\n"
    ) + "".join([
        "extern void %s(CPU *cpu);\n" % addrtbl[addr]
        for addr in ext
    ]) + (
        "\n"
    ) + "".join([
        "static void %s(CPU *cpu);\n" % addrtbl[addr]
        for addr in sym
    ]) + (
        "\n"
        "const CALL call_table[] =\n"
        "{\n"
    ) + "".join([
        "    {0x%08XU, %s},\n" % (addr, addrtbl[addr])
        for addr in sorted(ext+sym)
    ]) + (
        "    {0xFFFFFFFFU, NULL},\n"
        "};\n"
        "const uint call_len = lenof(call_table)-1;\n"
        "\n"
        "static const u32 data[] =\n"
        "{\n"
    ) + "".join([
        "    %s\n" % " ".join([
            "0x%08X," % struct.unpack(">I", app_data[i:i+4])[0]
            for i in range(i, i+0x10, 4)
        ])
        for i in range(0, len(app_data), 0x10)
    ]) + (
        "};\n"
    )
    app_c += """
int main(int argc, char **argv)
{
    CPU cpu;
    int_setexecpath(argv[0]);
    int_cinit(0x%08X, 0x%08X, 0x%08X, 0x%08X);
    memcpy(cpu_ptr(0x%08X), data, sizeof(data));
    cpu._sp = 0x%08X - 0x10;
    cpu._a0 = *cpu_s32(0x%08X) = argc;
    cpu._a1 = *cpu_s32(0x%08X) = int_writearg(argc, argv);
    cpu._a2 = NULLPTR;
    app_main(&cpu);
    return cpu._v0;
}
""" % (
    symtab["_end"],
    symtab["__ctype"],
    symtab["errno"],
    symtab["__iob"],
    symtab["_fdata"],
    symtab["_fdata"],
    symtab["__Argc"],
    symtab["__Argv"],
)
    sym.append(end)
    for i in range(len(sym)-1):
        addr_s = sym[i+0]
        addr_e = sym[i+1]
        addr = addr_s
        inst_maxb = 0
        reg_flag = chk_flag = 1 << 28 | 1 << 25
        jr = False
        jal_addr = None
        btbl = set()
        line = [
            (addr_s-4, (
                "    gp = 0x%08X;\n"
                "    t9 = 0x%08X;\n"
            ) % (symtab["_gp_disp"], addr_s))
        ]
        while True:
            ln, e = op_process()
            line += ln
            addr += 4
            if e or addr >= addr_e: break
        app_c += (
            "\n"
            "static void %s(%sCPU *cpu)\n"
            "{\n"
        ) % (
            addrtbl[addr_s],
            "" if (reg_flag | chk_flag) & reg_mask else "unused "
        )
        if jr:
            app_c += (
                "    static void *const jr[] =\n"
                "    {\n"
            )
            for addr in range(addr_s, addr, 4):
                app_c += "        &&_%08X,\n" % addr
                btbl.add(addr)
            app_c += "    };\n"
        for t, reg in reg_table:
            for flag, r in reg:
                if reg_mask & flag: continue
                if (reg_flag | chk_flag) & flag:
                    app_c += "    unused %s %s;\n" % (t, r)
        for addr, ln in line:
            if addr in btbl: app_c += "_%08X:;\n" % addr
            app_c += ln
        app_c += "}\n"
    with open(argv[1], "w") as f: f.write(app_c)
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))

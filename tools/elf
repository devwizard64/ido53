#!/usr/bin/env python3

import sys
import struct

PT_LOAD                 = 1

SHT_PROGBITS            = 1
SHT_SYMTAB              = 2
SHT_STRTAB              = 3

STB_LOCAL               = 0
STB_GLOBAL              = 1
STB_WEAK                = 2

def ST_BIND(info): return info>>4
def ST_TYPE(info): return info&0xf
def ST_INFO(bind, type_): return (bind<<4) + (type_&0xf)

def elf_read(fmt, f):
	return struct.unpack(fmt, f.read(struct.calcsize(fmt)))

def elf_name(self, sh):
	self.name = sh.data[self.name:sh.data.find(B"\0", self.name)].decode()

class ELFEH:
	def __init__(self, f):
		self.ident, self.type, self.machine, self.version, self.entry, \
			self.phoff, self.shoff, self.flags, self.ehsize, self.phentsize, \
			self.phnum, self.shentsize, self.shnum, self.shstrndx = \
			elf_read(">16sHHIIIIIHHHHHH", f)
		self.ident = struct.unpack(">16B", self.ident)

class ELFPH:
	def __init__(self, f):
		self.type, self.offset, self.vaddr, self.paddr, self.filesz, \
			self.memsz, self.flags, self.align = \
			elf_read(">IIIIIIII", f)

class ELFSH:
	def __init__(self, f):
		self.name, self.type, self.flags, self.addr, self.offset, self.size, \
			self.link, self.info, self.addralign, self.entsize = \
			elf_read(">IIIIIIIIII", f)
	def load(self, f):
		f.seek(self.offset)
		if self.type == SHT_SYMTAB or self.type == 11:
			self.num = self.size//16
			self.data = [ELFST(f) for _ in range(self.num)]
		else:
			self.data = f.read(self.size)

class ELFST:
	def __init__(self, f):
		self.name, self.value, self.size, self.info, self.other, self.shndx = \
			elf_read(">IIIBBH", f)

class ELF:
	def __init__(self, fn):
		with open(fn, "rb") as f:
			self.eh = ELFEH(f)
			f.seek(self.eh.phoff)
			self.ph = [ELFPH(f) for _ in range(self.eh.phnum)]
			f.seek(self.eh.shoff)
			self.sh = [ELFSH(f) for _ in range(self.eh.shnum)]
			for sh in self.sh: sh.load(f)
			for sh in self.sh: elf_name(sh, self.sh[self.eh.shstrndx])
			self.section = {sh.name: sh for sh in self.sh}
			for st in self.section[".dynsym"].data:
				elf_name(st, self.section[".dynstr"])

gpr = [
	"0",    "at",   "v0",   "v1",
	"a0",   "a1",   "a2",   "a3",
	"t0",   "t1",   "t2",   "t3",
	"t4",   "t5",   "t6",   "t7",
	"s0",   "s1",   "s2",   "s3",
	"s4",   "s5",   "s6",   "s7",
	"t8",   "t9",   "k0",   "k1",
	"gp",   "sp",   "r30",  "ra",
]

cop1_fmt = {
	0x10: "f[IX]",
	0x11: "d",
	0x14: "i[IX]",
}

reg_cpu = [
	# (1 <<  0, "r0"),
	(1 <<  1, "at"),
	(1 <<  2, "v0"),
	(1 <<  3, "v1"),
	(1 <<  4, "a0"),
	(1 <<  5, "a1"),
	(1 <<  6, "a2"),
	(1 <<  7, "a3"),
	(1 <<  8, "t0"),
	(1 <<  9, "t1"),
	(1 << 10, "t2"),
	(1 << 11, "t3"),
	(1 << 12, "t4"),
	(1 << 13, "t5"),
	(1 << 14, "t6"),
	(1 << 15, "t7"),
	(1 << 16, "s0"),
	(1 << 17, "s1"),
	(1 << 18, "s2"),
	(1 << 19, "s3"),
	(1 << 20, "s4"),
	(1 << 21, "s5"),
	(1 << 22, "s6"),
	(1 << 23, "s7"),
	(1 << 24, "t8"),
	(1 << 25, "t9"),
	# (1 << 26, "k0"),
	# (1 << 27, "k1"),
	(1 << 28, "gp"),
	(1 << 29, "sp"),
	(1 << 30, "r30"),
	(1 << 31, "ra"),
]

reg_fpu = [
	(1 << 32, "f0"),
	(1 << 33, "f2"),
	(1 << 34, "f4"),
	(1 << 35, "f6"),
	(1 << 36, "f8"),
	(1 << 37, "f10"),
	(1 << 38, "f12"),
	(1 << 39, "f14"),
	(1 << 40, "f16"),
	(1 << 41, "f18"),
	(1 << 42, "f20"),
	(1 << 43, "f22"),
	(1 << 44, "f24"),
	(1 << 45, "f26"),
	(1 << 46, "f28"),
	(1 << 47, "f30"),
]

reg_lohi = [
	(1 << 48, "lo"),
	(1 << 48, "hi"),
]

reg_table = [
	["int32_t", reg_cpu],
	["REG", reg_fpu],
	["int32_t", reg_lohi],
]

reg_mask = (
	1 <<  2 | # v0
	1 <<  3 | # v1
	1 <<  4 | # a0
	1 <<  5 | # a1
	1 <<  6 | # a2
	1 <<  7 | # a3
	1 << 16 | # s0
	1 << 17 | # s1
	1 << 18 | # s2
	1 << 19 | # s3
	1 << 20 | # s4
	1 << 21 | # s5
	1 << 22 | # s6
	1 << 23 | # s7
	1 << 29 | # sp
	1 << 30 | # r30
	1 << 31 | # ra
	1 << 32 | # f0
	1 << 38 | # f12
	1 << 39 | # f14
	1 << 42 | # f20
	1 << 43 | # f22
	1 << 44 | # f24
	1 << 45 | # f26
	1 << 46 | # f28
	1 << 47   # f30
)

def lw(addr):
	i = addr - 0x10000000
	x, = struct.unpack(">i", app_data[i:i+4])
	return x

def lw_gp(inst):
	return lw(symtab["_gp_disp"] + inst["imms"]) & 0xFFFFFFFF

def op_clear(line, i):
	line[i] = "\t}\n" if line[i].endswith("}\n") else ""

def op_unpack(addr):
	i = addr - app.section[".text"].addr
	x, = struct.unpack(">I", app_text[i:i+4])
	immu = x & 0xFFFF
	imms = immu - (immu << 1 & 0x10000)
	return {
		None: x,
		"op": x >> 26 & 63,
		"rs": x >> 21 & 31,
		"rt": x >> 16 & 31,
		"rd": x >> 11 & 31,
		"sa": x >> 6 & 31,
		"func": x >> 0 & 63,
		"immu": immu,
		"fmt": x >> 21 & 31,
		"ft": x >> 16 & 31,
		"fs": x >> 11 & 31,
		"fd": x >> 6 & 31,
		"imms": imms,
		"bdst": addr+4 + (imms << 2),
		"jdst": (addr & 0xF0000000) | (x & 0x03FFFFFF) << 2,
	}

def op_process(addr, line):
	inst = op_unpack(addr)
	return op_table[inst["op"]](addr, line, inst)

def op_maxb(jt):
	global inst_maxb
	if jt & 2:
		if inst_maxb < inst["bdst"]: inst_maxb = inst["bdst"]
	else:
		if inst_maxb < inst["jdst"]: inst_maxb = inst["jdst"]
	return jt

def op_jt(inst):
	if inst[None] == 0x10000001: return 0
	if inst["op"] == 0x01:
		if inst["rt"] in {0x00, 0x01}:         return op_maxb(2)
	if inst["op"] == 0x11:
		if inst["rs"] == 0x08:
			if inst["rt"] in {0x00, 0x01}:     return op_maxb(2)
	if inst["op"] in {0x04, 0x05, 0x06, 0x07}: return op_maxb(2)
	return 0

def op_end(inst):
	return inst[None] == 0x03E00008

def op_null(addr, line, inst):
	ln = "null 0x%08X:0x%08X" % (addr, inst)
	ln += "  op=0x%02X" % inst["op"]
	if inst["op"] == 0x00:
		ln += "  func=0x%02X" % inst["func"]
	if inst["op"] == 0x01:
		ln += "  rt=0x%02X" % inst["rt"]
	if inst["op"] == 0x11:
		ln += "  rs=0x%02X" % inst["rs"]
		if inst["rs"] in {0x10, 0x11, 0x14}:
			ln += "  func=0x%02X" % inst["func"]
	raise RuntimeError(ln)

def op_shift(addr, line, inst):
	global reg_flag
	global jal_addr
	reg_flag |= 1 << inst["rd"]
	if inst[None] == 0x00000000:
		line.append("")
		return False
	if inst["rd"] == 25: jal_addr = None
	if inst["func"] in {0x04, 0x06, 0x07}:
		rs = "(%s & 31)" % gpr[inst["rs"]]
	else:
		sa = inst["sa"]
		rs = "%d" % sa
	op, t = {
		0x00: ("<<", "(uint32_t)"),
		0x02: (">>", "(uint32_t)"),
		0x03: (">>", ""),
		0x04: ("<<", "(uint32_t)"),
		0x06: (">>", "(uint32_t)"),
		0x07: (">>", ""),
	}[inst["func"]]
	rt = gpr[inst["rt"]]
	rd = gpr[inst["rd"]]
	line.append("\t%s = %s%s %s %s;\n" % (
		rd, t, rt, op, rs
	))
	return False

def op_jr(addr, line, inst):
	if inst["rs"] == 31:
		ln = "\treturn;\n"
		end = addr >= inst_maxb
	else:
		count = None
		i = len(line) - 1
		x = op_unpack(addr_s+4*i)
		if x["op"] == 0x00 and x["func"] == 0x21 and x["rt"] == 28:
			op_clear(line, i)
			i -= 1; x = op_unpack(addr_s+4*i)
		if x[None] == 0x00000000:
			i -= 1; x = op_unpack(addr_s+4*i)
		if x["op"] != 0x23:
			i -= 1; x = op_unpack(addr_s+4*i)
		if x["op"] != 0x23:
			raise RuntimeError("bad jr (lw)")
		lo = x["imms"]
		op_clear(line, i)
		i -= 1; x = op_unpack(addr_s+4*i)
		if not (x["op"] == 0x00 and x["func"] == 0x21):
			i -= 1; x = op_unpack(addr_s+4*i)
		if not (x["op"] == 0x00 and x["func"] == 0x21):
			raise RuntimeError("bad jr (addu)")
		op_clear(line, i)
		i -= 1; x = op_unpack(addr_s+4*i)
		if not (x["op"] == 0x00 and x["func"] == 0x00):
			raise RuntimeError("bad jr (sll)")
		rt = x["rt"]
		op_clear(line, i)
		i -= 1; x = op_unpack(addr_s+4*i)
		if x["op"] == 0x0C:
			count = x["immu"] + 1
			i -= 1; x = op_unpack(addr_s+4*i)
		if x["op"] == 0x23 and x["rs"] == 28:
			hi = lw_gp(x)
		elif x["op"] == 0x0F:
			hi = x["immu"] << 16
		else:
			raise RuntimeError("bad jr (lui)")
		op_clear(line, i)
		if count is None:
			for _ in range(12):
				if x["op"] == 0x0B and x["rt"] == 1:
					count = x["imms"]
					break
				if x["op"] == 0x00 and x["func"] == 0x08:
					raise RuntimeError("bad jr (sltiu)")
				i -= 1; x = op_unpack(addr_s+4*i)
			else:
				raise RuntimeError("bad jr (sltiu over)")
		jtbl = hi + lo
		jtbl_table.append((jtbl, [
			symtab["_gp_disp"] + lw(jtbl+4*i)
			for i in range(count)
		]))
		ln = "\tgoto *jtbl%08X[%s];\n" % (jtbl, gpr[rt])
		end = False
	slot = []
	if op_process(addr+4, slot): end = True
	line.append(slot[0]+ln)
	line.append(slot[0])
	return end

def op_jalr(addr, line, inst):
	global jal_addr
	ja = jal_addr
	jal_addr = None
	ln = "\t__call(cpu, %s);\n" % gpr[inst["rs"]]
	if inst["rs"] == 25 and ja is not None:
		if   ja-4*0 in addrtbl: ln = "\t%s(cpu);\n" % addrtbl[ja-4*0]
		elif ja-4*3 in addrtbl: ln = "\t%s(cpu);\n" % addrtbl[ja-4*3]
	slot = []
	end = op_process(addr+4, slot)
	line.append(("\tra = 0x%08X;\n" % (addr+8))+slot[0]+ln)
	line.append("")
	return end

def op_break(addr, line, inst):
	line.append("\t__break(cpu, %d);\n" % inst["rt"])
	return False

def op_mfhilo(addr, line, inst):
	global reg_flag
	global jal_addr
	reg_flag |= 1 << inst["rd"]
	if inst["rd"] == 25: jal_addr = None
	rd = gpr[inst["rd"]]
	src = {
		0x10: "hi",
		0x12: "lo",
	}[inst["func"]]
	line.append("\t%s = %s;\n" % (rd, src))
	return False

def op_mult(addr, line, inst):
	global reg_flag
	reg_flag |= 1 << 48
	x, t = {
		0x19: ("int64_t", "(int32_t)"),
	}[inst["func"]]
	rs = gpr[inst["rs"]]
	rt = gpr[inst["rt"]]
	line.append((
		"\t{\n"
		"\t\t%s x = %s%s * %s%s;\n"
		"\t\tlo = x >>  0;\n"
		"\t\thi = x >> 32;\n"
		"\t}\n"
	) % (x, t, rs, t, rt))
	return False

def op_div(addr, line, inst):
	global reg_flag
	reg_flag |= 1 << 48
	t = {
		0x1A: "",
		0x1B: "(uint32_t)",
	}[inst["func"]]
	rs = gpr[inst["rs"]]
	rt = gpr[inst["rt"]]
	line.append((
		"\tif (%s%s != 0)\n"
		"\t{\n"
		"\t\tlo = %s%s / %s%s;\n"
		"\t\thi = %s%s %% %s%s;\n"
		"\t}\n"
	) % (t, rt, t, rs, t, rt, t, rs, t, rt))
	return False

def op_arith(addr, line, inst):
	global reg_flag
	global jal_addr
	reg_flag |= 1 << inst["rd"]
	if inst["rd"] == 25: jal_addr = None
	op, s, tt, e = {
		0x21: ("+", "", "", ""),
		0x22: ("-", "", "", ""),
		0x23: ("-", "", "", ""),
		0x24: ("&", "", "", ""),
		0x25: ("|", "", "", ""),
		0x26: ("^", "", "", ""),
		0x27: ("|", "~(", "", ")"),
		0x2A: ("<", "", "", ""),
		0x2B: ("<", "(uint32_t)", "(uint32_t)", ""),
	}[inst["func"]]
	rs = gpr[inst["rs"]]
	rt = gpr[inst["rt"]]
	rd = gpr[inst["rd"]]
	line.append("\t%s = %s%s %s %s%s%s;\n" % (
		rd, s, rs, op, tt, rt, e
	))
	return False

def op_special(addr, line, inst):
	return op_special_table[inst["func"]](addr, line, inst)

def op_regimm(addr, line, inst):
	return op_regimm_table[inst["rt"]](addr, line, inst)

def op_b(addr, line, inst):
	jt = op_jt(inst)
	if jt == 0:
		line.append("")
		return False
	if jt == 1:
		bc = "1"
		bdst = inst["jdst"]
	else:
		rs = gpr[inst["rs"]]
		rt = gpr[inst["rt"]]
		if inst["op"] in {0x01, 0x06, 0x07, 0x16, 0x17}:
			rt = "0"
		if inst["op"] == 0x11:
			bc = {
				0x00: cop1_cmp_f,
				0x01: cop1_cmp_t,
			}[inst["rt"]]
		else:
			if inst["op"] == 0x01:
				op = {
					0x00: "<",
					0x01: ">=",
					0x02: "<",
					0x03: ">=",
					0x10: "<",
					0x11: ">=",
					0x12: "<",
					0x13: ">=",
				}[inst["rt"]]
			else:
				op = {
					0x04: "==",
					0x05: "!=",
					0x06: "<=",
					0x07: ">",
					0x14: "==",
					0x15: "!=",
					0x16: "<=",
					0x17: ">",
				}[inst["op"]]
			bc = "%s %s %s" % (rs, op, rt)
			if rs == rt:
				if op in {"==", "<=", ">="}: bc = "1"
				if op in {"!=", "<",  ">" }: bc = "0"
		bdst = inst["bdst"]
	btbl.add(bdst)
	slot = []
	end = op_process(addr+4, slot)
	ln = (
		"\tif (%s)\n"
		"\t{\n"
	) % bc
	if slot[0]: ln += "\t" + slot[0]
	ln += (
		"\t\tgoto _%08X;\n"
		"\t}\n"
	) % bdst
	if slot[0] and jt & 2:
		ln += (
			"\telse\n"
			"\t{\n"
		)
		line.append(ln)
		line.append((
			"\t" + slot[0] +
			"\t}\n"
		))
	else:
		line.append(ln)
		line.append("")
	return False

def op_bal(addr, line, inst):
	if inst[None] == 0x04110001:
		line.append("\tra = 0x%08X;\n" % (addr+8))
		return False
	raise RuntimeError("bgezal $%s, 0x%08X" % (gpr[inst["rs"]], inst["bdst"]))

def op_arithi(addr, line, inst):
	global reg_flag
	global jal_addr
	reg_flag |= 1 << inst["rt"]
	op, t = {
		0x08: ("+", ""),
		0x09: ("+", ""),
		0x0A: ("<", ""),
		0x0B: ("<", "(uint32_t)"),
		0x0C: ("&", ""),
		0x0D: ("|", ""),
		0x0E: ("^", ""),
	}[inst["op"]]
	rs = gpr[inst["rs"]]
	rt = gpr[inst["rt"]]
	if inst["rt"] == 25:
		if inst["op"] == 0x09:
			if jal_addr is not None: jal_addr += inst["imms"]
		else:
			jal_addr = None
	# sltiu
	if inst["op"] == 0x0B:
		if inst["imms"] == 0:
			line.append("\t%s = 0;\n" % rt)
			return False
		imm = "0x%04X" % (inst["imms"] & 0xFFFFFFFF)
	# andi, ori, xori
	elif inst["op"] in {0x0C, 0x0D, 0x0E}:
		imm = "0x%04X" % inst["immu"]
	else:
		imm = "(int16_t)0x%04X" % inst["immu"]
	line.append("\t%s = %s%s %s %s;\n" % (rt, t, rs, op, imm))
	return False

def op_lui(addr, line, inst):
	global reg_flag
	global jal_addr
	reg_flag |= 1 << inst["rt"]
	if inst["rt"] == 25: jal_addr = inst["immu"] << 16
	rt = gpr[inst["rt"]]
	line.append("\t%s = 0x%08X;\n" % (rt, inst["immu"] << 16))
	return False

def op_mfc1(addr, line, inst):
	global reg_flag
	global jal_addr
	reg_flag |= 1 << inst["rt"]
	if inst["rt"] == 25: jal_addr = None
	line.append("\t%s = f%d.i[%d^IX];\n" % (
		gpr[inst["rt"]], inst["rd"] & ~1, inst["rd"] & 1
	))
	return False

def op_mtc1(addr, line, inst):
	global reg_flag
	reg_flag |= (1 << 32) << (inst["rd"] >> 1)
	line.append("\tf%d.i[%d^IX] = %s;\n" % (
		inst["rd"] & ~1, inst["rd"] & 1, gpr[inst["rt"]]
	))
	return False

def op_cfc1(addr, line, inst):
	global reg_flag
	reg_flag |= 1 << inst["rt"]
	line.append("\t%s = 0;\n" % gpr[inst["rt"]])
	return False

def op_ctc1(addr, line, inst):
	line.append("")
	return False

def op_arithf(addr, line, inst):
	global reg_flag
	reg_flag |= (1 << 32) << (inst["fd"] >> 1)
	fmt = cop1_fmt[inst["fmt"]]
	ft = "f%d.%s" % (inst["ft"] & ~1, fmt)
	fs = "f%d.%s" % (inst["fs"] & ~1, fmt)
	fd = "f%d.%s" % (inst["fd"] & ~1, fmt)
	if inst["func"] in {0x04, 0x05, 0x06, 0x07}:
		start, end = {
			0x06: ("", ""),
			0x07: ("-", ""),
		}[inst["func"]]
		line.append("\t%s = %s%s%s;\n" % (fd, start, fs, end))
	else:
		op = {
			0x00: "+",
			0x01: "-",
			0x02: "*",
			0x03: "/",
		}[inst["func"]]
		line.append("\t%s = %s %s %s;\n" % (fd, fs, op, ft))
	return False

def op_cvt(addr, line, inst):
	global reg_flag
	reg_flag |= (1 << 32) << (inst["fd"] >> 1)
	dst = {
		0x20: "f[IX]", # cvt.s
		0x21: "d",     # cvt.d
		0x24: "i[IX]", # cvt.w
	}[inst["func"]]
	fmt = cop1_fmt[inst["fmt"]]
	fs = "f%d.%s" % (inst["fs"] & ~1, fmt)
	fd = "f%d.%s" % (inst["fd"] & ~1, dst)
	line.append("\t%s = %s;\n" % (fd, fs))
	return False

def op_cmp(addr, line, inst):
	global cop1_cmp_f
	global cop1_cmp_t
	f, t = {
		0x32: ("!=", "=="),
		0x3C: (">=", "<"),
		0x3E: (">",  "<="),
	}[inst["func"]]
	fmt = cop1_fmt[inst["fmt"]]
	ft = "f%d.%s" % (inst["ft"] & ~1, fmt)
	fs = "f%d.%s" % (inst["fs"] & ~1, fmt)
	cop1_cmp_f = "%s %s %s" % (fs, f, ft)
	cop1_cmp_t = "%s %s %s" % (fs, t, ft)
	line.append("")
	return False

def op_cop1_f(addr, line, inst):
	return op_cop1_func_table[inst["func"]](addr, line, inst)

def op_cop1(addr, line, inst):
	return op_cop1_table[inst["rs"]](addr, line, inst)

def op_load(addr, line, inst):
	global reg_flag
	global jal_addr
	t = {
		0x20: "s8",
		0x21: "s16",
		0x23: "s32",
		0x24: "u8",
		0x25: "u16",
		0x27: "u32",
		0x31: "s32",
	}[inst["op"]]
	rs = gpr[inst["rs"]]
	if inst["op"] == 0x31:
		reg_flag |= (1 << 32) << (inst["rt"] >> 1)
		rt = "f%d.i[%d^IX]" % (inst["rt"] & ~1, inst["rt"] & 1)
	else:
		if inst["rt"] == 0:
			line.append("")
			return False
		reg_flag |= 1 << inst["rt"]
		if inst["rt"] == 25:
			if inst["rs"] == 28:
				jal_addr = lw_gp(inst)
			else:
				jal_addr = None
		rt = gpr[inst["rt"]]
	line.append("\t%s = *cpu_%s(%s + (int16_t)0x%04X);\n" % (
		rt, t, rs, inst["immu"]
	))
	return False

def op_store(addr, line, inst):
	global chk_flag
	t = {
		0x28: "s8",
		0x29: "s16",
		0x2B: "s32",
		0x39: "s32",
	}[inst["op"]]
	rs = gpr[inst["rs"]]
	if inst["op"] == 0x39:
		# flag = (1 << 32) << (inst["rt"] >> 1)
		# # f20-f30
		# if (flag & 0xFC0000000000) and not (reg_flag|chk_flag) & flag:
		# 	chk_flag |= flag
		# 	line.append("")
		# 	return False
		rt = "f%d.i[%d^IX]" % (inst["rt"] & ~1, inst["rt"] & 1)
	else:
		# flag = 1 << inst["rt"]
		# # s0-s7, s8, ra
		# if (flag & 0x0000C0FF0000) and not (reg_flag|chk_flag) & flag:
		# 	chk_flag |= flag
		# 	line.append("")
		# 	return False
		rt = gpr[inst["rt"]]
	line.append("\t*cpu_%s(%s + (int16_t)0x%04X) = %s;\n" % (
		t, rs, inst["immu"], rt
	))
	return False

def op_ls(addr, line, inst):
	t = {
		0x22: "lwl",
		0x26: "lwr",
		0x2A: "swl",
		0x2E: "swr",
	}[inst["op"]]
	rs = gpr[inst["rs"]]
	rt = gpr[inst["rt"]]
	line.append("\t__%s(%s + (int16_t)0x%04X, %s);\n" % (
		t, rs, inst["immu"], rt
	))
	return False

def op_lw(addr, line, inst):
	global reg_flag
	if inst["rt"] == 0:
		line.append("")
		return False
	reg_flag |= 1 << inst["rt"]
	return op_ls(addr, line, inst)

def op_sw(addr, line, inst):
	global chk_flag
	# flag = 1 << inst["rt"]
	# # s0-s7, s8, ra
	# if (flag & 0x0000C0FF0000) and not (reg_flag|chk_flag) & flag:
	# 	chk_flag |= flag
	# 	line.append("")
	# 	return False
	return op_ls(addr, line, inst)

op_special_table = [
	op_shift,   # 0x00 sll
	op_null,    # 0x01
	op_shift,   # 0x02 srl
	op_shift,   # 0x03 sra
	op_shift,   # 0x04 sllv
	op_null,    # 0x05
	op_shift,   # 0x06 srlv
	op_shift,   # 0x07 srav
	op_jr,      # 0x08 jr
	op_jalr,    # 0x09 jalr
	op_null,    # 0x0A
	op_null,    # 0x0B
	op_null,    # 0x0C syscall
	op_break,   # 0x0D break
	op_null,    # 0x0E
	op_null,    # 0x0F sync
	op_mfhilo,  # 0x10 mfhi
	op_null,    # 0x11 mthi
	op_mfhilo,  # 0x12 mflo
	op_null,    # 0x13 mtlo
	op_null,    # 0x14 dsllv
	op_null,    # 0x15
	op_null,    # 0x16 dsrlv
	op_null,    # 0x17 dsrav
	op_null,    # 0x18 mult
	op_mult,    # 0x19 multu
	op_div,     # 0x1A div
	op_div,     # 0x1B divu
	op_null,    # 0x1C dmult
	op_null,    # 0x1D dmultu
	op_null,    # 0x1E ddiv
	op_null,    # 0x1F ddivu
	op_null,    # 0x20 add
	op_arith,   # 0x21 addu
	op_arith,   # 0x22 sub
	op_arith,   # 0x23 subu
	op_arith,   # 0x24 and
	op_arith,   # 0x25 or
	op_arith,   # 0x26 xor
	op_arith,   # 0x27 nor
	op_null,    # 0x28
	op_null,    # 0x29
	op_arith,   # 0x2A slt
	op_arith,   # 0x2B sltu
	op_null,    # 0x2C dadd
	op_null,    # 0x2D daddu
	op_null,    # 0x2E dsub
	op_null,    # 0x2F dsubu
	op_null,    # 0x30 tge
	op_null,    # 0x31 tgeu
	op_null,    # 0x32 tlt
	op_null,    # 0x33 tltu
	op_null,    # 0x34 teq
	op_null,    # 0x35
	op_null,    # 0x36 tne
	op_null,    # 0x37
	op_null,    # 0x38 dsll
	op_null,    # 0x39
	op_null,    # 0x3A dsrl
	op_null,    # 0x3B dsra
	op_null,    # 0x3C dsll32
	op_null,    # 0x3D
	op_null,    # 0x3E dsrl32
	op_null,    # 0x3F dsra32
]

op_regimm_table = [
	op_b,       # 0x00 bltz
	op_b,       # 0x01 bgez
	op_null,    # 0x02 bltzl
	op_null,    # 0x03 bgezl
	op_null,    # 0x04
	op_null,    # 0x05
	op_null,    # 0x06
	op_null,    # 0x07
	op_null,    # 0x08 tgei
	op_null,    # 0x09 tgeiu
	op_null,    # 0x0A tlti
	op_null,    # 0x0B tltiu
	op_null,    # 0x0C teqi
	op_null,    # 0x0D
	op_null,    # 0x0E tnei
	op_null,    # 0x0F
	op_null,    # 0x10 bltzal
	op_bal,     # 0x11 bgezal
	op_null,    # 0x12 bltzall
	op_null,    # 0x13 bgezall
	op_null,    # 0x14
	op_null,    # 0x15
	op_null,    # 0x16
	op_null,    # 0x17
	op_null,    # 0x18
	op_null,    # 0x19
	op_null,    # 0x1A
	op_null,    # 0x1B
	op_null,    # 0x1C
	op_null,    # 0x1D
	op_null,    # 0x1E
	op_null,    # 0x1F
]

op_cop1_func_table = [
	op_arithf,  # 0x00 add
	op_arithf,  # 0x01 sub
	op_arithf,  # 0x02 mul
	op_arithf,  # 0x03 div
	op_null,    # 0x04 sqrt
	op_null,    # 0x05 abs
	op_arithf,  # 0x06 mov
	op_arithf,  # 0x07 neg
	op_null,    # 0x08 round.l
	op_null,    # 0x09 trunc.l
	op_null,    # 0x0A ceil.l
	op_null,    # 0x0B floor.l
	op_null,    # 0x0C round.w
	op_null,    # 0x0D trunc.w
	op_null,    # 0x0E ceil.w
	op_null,    # 0x0F floor.w
	op_null,    # 0x10
	op_null,    # 0x11
	op_null,    # 0x12
	op_null,    # 0x13
	op_null,    # 0x14
	op_null,    # 0x15
	op_null,    # 0x16
	op_null,    # 0x17
	op_null,    # 0x18
	op_null,    # 0x19
	op_null,    # 0x1A
	op_null,    # 0x1B
	op_null,    # 0x1C
	op_null,    # 0x1D
	op_null,    # 0x1E
	op_null,    # 0x1F
	op_cvt,     # 0x20 cvt.s
	op_cvt,     # 0x21 cvt.d
	op_null,    # 0x22
	op_null,    # 0x23
	op_cvt,     # 0x24 cvt.w
	op_null,    # 0x25 cvt.l
	op_null,    # 0x26
	op_null,    # 0x27
	op_null,    # 0x28
	op_null,    # 0x29
	op_null,    # 0x2A
	op_null,    # 0x2B
	op_null,    # 0x2C
	op_null,    # 0x2D
	op_null,    # 0x2E
	op_null,    # 0x2F
	op_null,    # 0x30 c.f
	op_null,    # 0x31 c.un
	op_cmp,     # 0x32 c.eq
	op_null,    # 0x33 c.ueq
	op_null,    # 0x34 c.olt
	op_null,    # 0x35 c.ult
	op_null,    # 0x36 c.ole
	op_null,    # 0x37 c.ule
	op_null,    # 0x38 c.sf
	op_null,    # 0x39 c.ngle
	op_null,    # 0x3A c.seq
	op_null,    # 0x3B c.ngl
	op_cmp,     # 0x3C c.lt
	op_null,    # 0x3D c.nge
	op_cmp,     # 0x3E c.le
	op_null,    # 0x3F c.ngt
]

op_cop1_table = [
	op_mfc1,    # 0x00 mfc1
	op_null,    # 0x01 dmfc1
	op_cfc1,    # 0x02 cfc1
	op_null,    # 0x03
	op_mtc1,    # 0x04 mtc1
	op_null,    # 0x05 dmtc1
	op_ctc1,    # 0x06 ctc1
	op_null,    # 0x07
	op_b,       # 0x08 bc1
	op_null,    # 0x09
	op_null,    # 0x0A
	op_null,    # 0x0B
	op_null,    # 0x0C
	op_null,    # 0x0D
	op_null,    # 0x0E
	op_null,    # 0x0F
	op_cop1_f,  # 0x10
	op_cop1_f,  # 0x11
	op_null,    # 0x12
	op_null,    # 0x13
	op_cop1_f,  # 0x14
	op_null,    # 0x15
	op_null,    # 0x16
	op_null,    # 0x17
	op_null,    # 0x18
	op_null,    # 0x19
	op_null,    # 0x1A
	op_null,    # 0x1B
	op_null,    # 0x1C
	op_null,    # 0x1D
	op_null,    # 0x1E
	op_null,    # 0x1F
]

op_table = [
	op_special, # 0x00 special
	op_regimm,  # 0x01 regimm
	op_null,    # 0x02 j
	op_null,    # 0x03 jal
	op_b,       # 0x04 beq
	op_b,       # 0x05 bne
	op_b,       # 0x06 blez
	op_b,       # 0x07 bgtz
	op_arithi,  # 0x08 addi
	op_arithi,  # 0x09 addiu
	op_arithi,  # 0x0A slti
	op_arithi,  # 0x0B sltiu
	op_arithi,  # 0x0C andi
	op_arithi,  # 0x0D ori
	op_arithi,  # 0x0E xori
	op_lui,     # 0x0F lui
	op_null,    # 0x10 cop0
	op_cop1,    # 0x11 cop1
	op_null,    # 0x12 cop2
	op_null,    # 0x13
	op_null,    # 0x14 beql
	op_null,    # 0x15 bnel
	op_null,    # 0x16 blezl
	op_null,    # 0x17 bgtzl
	op_null,    # 0x18 daddi
	op_null,    # 0x19 daddiu
	op_null,    # 0x1A ldl
	op_null,    # 0x1B ldr
	op_null,    # 0x1C
	op_null,    # 0x1D
	op_null,    # 0x1E
	op_null,    # 0x1F
	op_load,    # 0x20 lb
	op_load,    # 0x21 lh
	op_lw,      # 0x22 lwl
	op_load,    # 0x23 lw
	op_load,    # 0x24 lbu
	op_load,    # 0x25 lhu
	op_lw,      # 0x26 lwr
	op_null,    # 0x27 lwu
	op_store,   # 0x28 sb
	op_store,   # 0x29 sh
	op_sw,      # 0x2A swl
	op_store,   # 0x2B sw
	op_null,    # 0x2C sdl
	op_null,    # 0x2D sdr
	op_sw,      # 0x2E swr
	op_null,    # 0x2F cache
	op_null,    # 0x30 ll
	op_load,    # 0x31 lwc1
	op_null,    # 0x32 lwc2
	op_null,    # 0x33
	op_null,    # 0x34 lld
	op_null,    # 0x35 ldc1
	op_null,    # 0x36 ldc2
	op_null,    # 0x37 ld
	op_null,    # 0x38 sc
	op_store,   # 0x39 swc1
	op_null,    # 0x3A swc2
	op_null,    # 0x3B
	op_null,    # 0x3C scd
	op_null,    # 0x3D sdc1
	op_null,    # 0x3E sdc2
	op_null,    # 0x3F sd
]

def i_hi(x):    return (x >> 16) + (x >> 15 & 1)
def i_lo(x):    return x & 0xFFFF

def e_reg(op, rs, rt, rd, sa, fn):
	return (
		(op & 63) << 26 |
		(rs & 31) << 21 |
		(rt & 31) << 16 |
		(rd & 31) << 11 |
		(sa & 31) <<  6 |
		(fn & 63) <<  0
	)

def e_imm(op, rs, rt, im):
	return (
		(op & 63) << 26 |
		(rs & 31) << 21 |
		(rt & 31) << 16 |
		(im & 0xFFFF) << 0
	)

def e_la_u(rt, addr):   return e_imm(15,  0, rt, i_hi(addr))
def e_la_l(rt, addr):   return e_imm( 9, rt, rt, i_lo(addr))
def e_jalr(rs):         return e_reg( 0, rs,  0, 31,  0,  9)
def e_nop():            return e_reg( 0,  0,  0,  0,  0,  0)

def patch(symbol, callback):
	global app_text
	if symbol in symtab:
		i = symtab[symbol] - app.section[".text"].addr
		x = B"".join([struct.pack(">I", x) for x in callback()])
		app_text = app_text[:i] + x + app_text[i+len(x):]

def readsym(elf):
	for st in elf.section[".dynsym"].data[1:]:
		name = st.name
		addr = st.value
		if st.shndx == 0x0000 or st.shndx == 0xFFF2: # UND / COM
			undtbl.add(name)
			if name == "_rld_new_interface": addrtbl[addr] = "lib_" + name
		else:
			if name not in symtab: symtab[name] = addr
			if addr not in addrtbl:
				if name not in nametbl:
					nametbl[name] = 0
				else:
					nametbl[name] += 1
					name += "_%d" % nametbl[name]
				addrtbl[addr] = "app_" + name

def readext(elf):
	for st in elf.section[".dynsym"].data[1:]:
		name = st.name
		addr = st.value
		if name in undtbl:
			if name not in symtab: symtab[name] = addr
			if addr not in addrtbl or not name.startswith("_"):
				if not name.startswith(".") and name not in {
					"__elf_header",
					"__program_header_table",
					"sys_errlist",
					"sys_nerr",
					"__ctype",
					"__us_rsthread_stdio",
					"errno",
					"_environ",
					"__iob",
					"_smbuf",
					"_sibuf",
					"_sobuf",
				}: addrtbl[addr] = "lib_" + name

if len(sys.argv) < 2:
	sys.stderr.write("usage: %s <elf> [ext ...]" % sys.argv[0])
	sys.exit(1)
app = ELF(sys.argv[1])
app_text = app.section[".text"].data
app_data = (
	app.section[".data"].data +
	app.section[".rodata"].data +
	app.section[".got"].data
)
symtab  = {}
addrtbl = {}
nametbl = {}
undtbl  = {
	"__ctype",
	"errno",
	"__iob",
}
readsym(app)
for fn in sys.argv[2:]: readext(ELF(fn))
text_s = app.section[".text"].addr
text_e = app.section[".text"].addr + app.section[".text"].size
patch("xmalloc", lambda: (
	e_la_u( 5, symtab["malloc_scb"]),
	e_la_u(25, symtab["alloc_new"]),
	e_la_l(25, symtab["alloc_new"]),
	e_jalr(25),
	e_la_l( 5, symtab["malloc_scb"]),
	e_nop(),
	e_nop(),
))
patch("xfree", lambda: (
	e_la_u( 5, symtab["malloc_scb"]),
	e_la_u(25, symtab["alloc_dispose"]),
	e_la_l(25, symtab["alloc_dispose"]),
	e_jalr(25),
	e_la_l( 5, symtab["malloc_scb"]),
))
# if sys.argv[1] == "donor/uld":
# 	app_data = app_data[:0x31F7] + B"%d)\n" + app_data[0x31FB:]
addr = text_s
while addr < text_e:
	while addr < text_e:
		inst = op_unpack(addr)
		if inst[None] != 0x00000000: break
		addr += 4
	if addr >= text_e: break
	if addr not in addrtbl: addrtbl[addr] = "app_%08X" % addr
	inst_maxb = 0
	while True:
		inst = op_unpack(addr)
		op_jt(inst)
		if op_end(inst) and addr >= inst_maxb: break
		addr += 4
	addr += 8
ext = sorted([
	addr for addr in addrtbl.keys()
	if addrtbl[addr].startswith("lib_")
])
sym = sorted([
	addr for addr in addrtbl.keys()
	if addr > symtab["_mcount"] and addr < text_e
])
print("#include \"app.h\"\n")
for addr in ext: print("extern void %s(CPU *cpu);" % addrtbl[addr])
print("")
for addr in sym: print("static void %s(CPU *cpu);" % addrtbl[addr])
print(
	"\n"
	"const CALL call_table[] =\n"
	"{"
)
calltab = sorted(ext+sym)
for addr in calltab: print("\t{0x%08X, %s}," % (addr, addrtbl[addr]))
print((
	"\t{-1, NULL},\n"
	"};\n"
	"const int call_len = %d;\n"
	"\n"
	"static const uint32_t data[] =\n"
	"{"
) % len(calltab))
for i in range(0, len(app_data), 16): print("\t" + " ".join([
	"0x%08X," % struct.unpack(">I", app_data[i:i+4])[0]
	for i in range(i, i+16, 4)
]))
print("""};

int main(int argc, char *argv[])
{
	CPU cpu;
	int_setexecpath(argv[0]);
	int_cinit(0x%08X, 0x%08X, 0x%08X, 0x%08X);
	memcpy(cpu_ptr(0x%08X), data, sizeof(data));
	memset(&cpu, 0, sizeof(CPU));
	cpu._sp = 0x%08X - 16;
	cpu._a0 = *cpu_s32(0x%08X) = argc;
	cpu._a1 = *cpu_s32(0x%08X) = int_writearg(argc, argv);
	cpu._a2 = NULLPTR;
	app_main(&cpu);
	return cpu._v0;
}""" % (
	symtab["_end"], symtab["__ctype"], symtab["errno"], symtab["__iob"], # cinit
	app.section[".data"].addr, # data
	symtab["_fdata"], # sp
	symtab["__Argc"], # a0
	symtab["__Argv"], # a1
))
sym.append(text_e)
for i in range(len(sym)-1):
	addr_s = sym[i+0]
	addr_e = sym[i+1]
	inst_maxb = 0
	reg_flag = chk_flag = 1 << 25 | 1 << 28
	jtbl_table = []
	jal_addr = None
	btbl = set()
	line = []
	while True:
		addr = addr_s + 4*len(line)
		if addr >= addr_e: break
		n = len(line)
		if op_process(addr, line): break
		if n >= len(line): raise RuntimeError("len %d -> %d" % (n, len(line)))
	addr_e = addr
	print((
		"\n"
		"static void %s(%sCPU *cpu)\n"
		"{"
	) % (
		addrtbl[addr_s],
		"" if (reg_flag|chk_flag) & reg_mask else "UNUSED "
	))
	for addr, jtbl in jtbl_table:
		print((
			"\tstatic void *const jtbl%08X[] =\n"
			"\t{"
		) % addr)
		for addr in jtbl:
			print("\t\t&&_%08X," % addr)
			btbl.add(addr)
		print("\t};")
	for t, reg in reg_table:
		for flag, r in reg:
			if reg_mask & flag: continue
			if (reg_flag|chk_flag) & flag:
				if   flag & (1 << 25): x = "0x%08X" % addr_s
				elif flag & (1 << 28): x = "0x%08X" % symtab["_gp_disp"]
				elif flag & 0xFFFF00000000: x = "{0}"
				else: x = "0"
				print("\tUNUSED %s %s = %s;" % (t, r, x))
	addr = addr_s
	for ln in line:
		if addr in btbl: print("_%08X:;" % addr)
		sys.stdout.write(ln)
		addr += 4
	print("}")
